// <auto-generated />
using CoreWebAPI.EF;
using CoreWebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CoreWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreWebAPI.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("CustomerID");

                    b.Property<int>("HomeNumber");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Courier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(256);

                    b.Property<float>("Rate");

                    b.HasKey("ID");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("CoreWebAPI.Models.CourierToken", b =>
                {
                    b.Property<int>("CourierID");

                    b.Property<DateTime>("DateOfExpire");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("CourierID");

                    b.ToTable("CourierTokens");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressID");

                    b.Property<string>("Comment");

                    b.Property<int>("CourierID");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DeliveryTime");

                    b.Property<int>("OrderPaymentStatus");

                    b.Property<int>("OrderStatus");

                    b.Property<float>("Price");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("CourierID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<float>("Price");

                    b.HasKey("ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CoreWebAPI.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<int>("OrderID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("ProductID", "OrderID");

                    b.HasIndex("OrderID");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Report", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<int>("CourierID");

                    b.Property<double>("Distance");

                    b.Property<float>("Profit");

                    b.Property<DateTime>("ReportDate");

                    b.HasKey("ID");

                    b.HasIndex("CourierID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("CourierID");

                    b.Property<int>("CustomerID");

                    b.Property<float>("Rate");

                    b.HasKey("ID");

                    b.HasIndex("CourierID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CoreWebAPI.Models.Address", b =>
                {
                    b.HasOne("CoreWebAPI.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("CoreWebAPI.Models.CourierToken", b =>
                {
                    b.HasOne("CoreWebAPI.Models.Courier", "Courier")
                        .WithOne("CourierToken")
                        .HasForeignKey("CoreWebAPI.Models.CourierToken", "CourierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreWebAPI.Models.Order", b =>
                {
                    b.HasOne("CoreWebAPI.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreWebAPI.Models.Courier", "Courier")
                        .WithMany("Orders")
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreWebAPI.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreWebAPI.Models.ProductOrder", b =>
                {
                    b.HasOne("CoreWebAPI.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreWebAPI.Models.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreWebAPI.Models.Report", b =>
                {
                    b.HasOne("CoreWebAPI.Models.Courier", "Courier")
                        .WithMany("Reports")
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreWebAPI.Models.Review", b =>
                {
                    b.HasOne("CoreWebAPI.Models.Courier", "Courier")
                        .WithMany("Reviews")
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreWebAPI.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
